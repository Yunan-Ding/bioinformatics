import matplotlib.pyplot as plt
import networkx as nx
import pandas as pd
import numpy as np
import openpyxl as npl

# 读取数据
df = pd.read_excel('E:\Python training\AREG\JASPAR-UCSC.xlsx',engine='openpyxl')
#print(df)
# data=pd.read_excel('E:\Python training\AREG\JASPAR-UCSC.xlsx',sheetname='sheet1',header=0,names=['第一列','第二列','第三列'])
# 使用iloc按位置区域提取数据
# data=df.iloc[:,1:3] #冒号前后的数字不再是索引的标签名称，而是数据所在的位置，从0开始，[行，列]。
# print(data)

# 按照转录因子名字出现次数进行计数
name = df.groupby('Name').size()
name_num = df.groupby('Name').count()
# print(name_num)
count = pd.Series(name.index, index=name.values)
count_num = np.asarray(count)  # 转成数组形式
list_count_num = count_num.tolist()  # 数组转化为list
print('TFDB出现计数结果'.format(count),count)

re=[]
for i in range(len(list_count_num)):
    a = list_count_num[i]
    FF = df.loc[(df['Name'] == a)]
   # print(FF)
    b = FF.iloc[:,1:3]
    score_max = b.iloc[:,1:2].max()
    c = [a,score_max]
    cc = score_max.values
    re.extend(cc)
print(re)
#for i, v in enumerate(re): re[i] = int(v)字符串转整数
#df['A'] = df['A'].apply(lambda x: float(x) if isinstance(x, str) else x)
#re = re.apply(lambda x: float(x) if isinstance(x, str) else x)
#print(re)


# 取指定列
##建一个表格
result = name_num.iloc[:, :1]
# print(result)
# 表格新建一列
result['weight'] = name_num.iloc[:, :1]
print(result)
result['from_gene'] = 'AREG'
print(result)
result['to_gene'] = count_num
print(result)
result['Score'] =re
print(result)
# count_num=name_num['Matrix ID']
# 将指定列转化为数组
# count_num_arry= np.asarray(count_num)
# 将数组转化为list
# list_count_num=count_num_arry.tolist()
# 合并数据集
# count_result=pd.merge(name,count_num)
# print(count_result)
# df.groupby('Name')['id'].count()

# 创建一个空的无向图/创建一个空的加权图
G = nx.Graph()
# 添加节点
nodes = result['to_gene']
result1=result.iloc[1:,:]
edge_data = result1

# edge_data = result['from_gene','to_gene','weight']
for node in nodes:
    G.add_node(node)
# row = np.array(['FL','FM','FR','TL','TR','C','P','O'])
# G.add_nodes_from([1, 2, 3, 4,5,6,7,8,9,10,11])
# 添加边
# G.add_edges_from([(1, 2), (1, 3), (1, 4), (1, 5),(1,6),(1,7),(1,8),(1,9),(1,10),(1,11)])
# 或者可以使用下面的方式一次性添加边
# edges = [(1, 2), (2, 3), (3, 4), (4, 1)]
# G.add_edges_from(edges)
# 添加带权边
for edge in edge_data.itertuples():
    src = edge.from_gene
    dst = edge.to_gene
    weight = edge.weight
    G.add_edge(src, dst, weight=weight)
# G.add_weighted_edges_from([(1, 2,0.5), (1, 3,1), (1, 4,2), (1, 5,3),(1,6,4),(1,7,5),(1,8,6),(1,9,7),(1,10,8),(1,11,9)])
# 或者可以使用下面的方式一次性添加带权边
# weighted_edges = [(1, 2, 0.5), (2, 3, 1.2), (3, 4, 0.8), (4, 1, 1.5)]
# G.add_weighted_edges_from(weighted_edges)

dd = dict(result.Score)
#new_items = {'AREG':'10'}
#dd.update(new_items)
print(dd)

# 绘制网络图
#nx.draw(G, with_labels=True, node_color='skyblue',edge_color='black',font_size =10,
#        node_size=1000,
#        width=[float(d['weight'] * 1.2) for (u, v, d) in G.edges(data=True)])
#G.add_node(src,size=100)
nx.draw(G, with_labels=True,edge_color='grey',node_color='orange',font_size =5,
        alpha=1,
        nodelist=dd, node_size=[v ** 2.3 for v in dd.values()],
        width=[float(d['weight'] * 0.9) for (u, v, d) in G.edges(data=True)])
plt.show()

result1.to_csv('E:\Python training\AREG\Jas-UCSC.csv',index=False)
